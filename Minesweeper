# Special unicode characters used:
# ⎯, □, ⚑

import os, random

game_over = 0
lst = []
all_blank_cells = []
current_blank_cells = []
all_num_cells = []

class Cell:
  def __init__(self, x, y):
    self.is_num = False
    self.is_mine = False
    self.is_vis = False
    self.is_flagged = False
    self.comp_val = '?'
    self.vis_val = '?'
    self.x = x
    self.y = y

def make_grid(len = 8, wid = 8):
  for i in range(wid):
    sublst = []
    for j in range(len):
      sublst.append(Cell(j, i))
    lst.append(sublst)
  return lst

def make_mines():
  x = 0
  y = 0

  for i in range(round(len_lst * wid_lst * 0.2)):
    x = random.randint(0, len_lst - 1)
    y = random.randint(0, wid_lst - 1)
    lst[y][x].is_mine = True
    lst[y][x].comp_val = 'B'

def make_num_cells():
  for i in range(len(lst)):
    for j in range(len(lst[i])):
      if lst[i][j].comp_val != 'B':
        count = 0
        if i != 0 and j != 0:
          # Top Left
          if lst[i-1][j-1].comp_val == 'B':
            count += 1

        if i != 0:
          # Top Center
          if lst[i-1][j].comp_val == 'B':
            count += 1

        if i != 0 and j != len_lst - 1:
          # Top Right
          if lst[i-1][j+1].comp_val == 'B':
            count += 1

        if j != 0:
          # Center Left
          if lst[i][j-1].comp_val == 'B':
            count += 1

        if j != len_lst - 1:
          # Center Right
          if lst[i][j+1].comp_val == 'B':
            count += 1

        if i != wid_lst - 1 and j != 0:
          # Bottom Left
          if lst[i+1][j-1].comp_val == 'B':
            count += 1

        if i != wid_lst - 1:
          # Bottom Center
          if lst[i+1][j].comp_val == 'B':
            count += 1

        if i != wid_lst - 1 and j != len_lst - 1:
          # Bottom Right
          if lst[i+1][j+1].comp_val == 'B':
            count += 1

        if count == 0:
          lst[i][j].comp_val = '□'
        else:
          lst[i][j].comp_val = count
          lst[i][j].is_num = True

def display_grid(is_comp):
  grid_str = ''
  str_2 = '    '
  str_3 = '    '
  
  for i in range(len(lst[0])):
    if i < 10:
      str_2 += str(i) + '  '
    else:
      str_2 += str(i) + ' '

    str_3 += '⎯⎯⎯'

  print(str_2)
  print(str_3)
  
  for i in range(len(lst)):
    if i < 10:
      grid_str += ' ' + str(i) + ' |'
    else:
      grid_str += str(i) + ' |'
      
    for j in range(len(lst[i])):
      if is_comp:
        grid_str += str(lst[i][j].comp_val) + '  '
      else:
        grid_str += str(lst[i][j].vis_val) + '  '
    grid_str += '\n   |\n'
  return grid_str

def reveal_blank_cells(x, y):
  blank_cells = []
  if x != 0 and y != 0:
    # Top Left
    if not lst[y-1][x-1].is_vis:
      lst[y-1][x-1].is_vis = True
      lst[y-1][x-1].vis_val = lst[y-1][x-1].comp_val
      if lst[y-1][x-1].comp_val == '□':
        blank_cells.append(lst[y-1][x-1])

  if y != 0:
    # Top Center
    if not lst[y-1][x].is_vis:
      lst[y-1][x].is_vis = True
      lst[y-1][x].vis_val = lst[y-1][x].comp_val
      if lst[y-1][x].comp_val == '□':
        blank_cells.append(lst[y-1][x])

  if x != len_lst - 1 and y != 0:
    # Top Right
    if not lst[y-1][x+1].is_vis:
      lst[y-1][x+1].is_vis = True
      lst[y-1][x+1].vis_val = lst[y-1][x+1].comp_val
      if lst[y-1][x+1].comp_val == '□':
        blank_cells.append(lst[y-1][x+1])

  if x != 0:
    # Center Left
    if not lst[y][x-1].is_vis:
      lst[y][x-1].is_vis = True
      lst[y][x-1].vis_val = lst[y][x-1].comp_val
      if lst[y][x-1].comp_val == '□':
        blank_cells.append(lst[y][x-1])

  if x != len_lst - 1:
    # Center Right
    if not lst[y][x+1].is_vis:
      lst[y][x+1].is_vis = True
      lst[y][x+1].vis_val = lst[y][x+1].comp_val
      if lst[y][x+1].comp_val == '□':
        blank_cells.append(lst[y][x+1])

  if x != 0 and y != wid_lst - 1:
    # Bottom Left
    if not lst[y+1][x-1].is_vis:
      lst[y+1][x-1].is_vis = True
      lst[y+1][x-1].vis_val = lst[y+1][x-1].comp_val
      if lst[y+1][x-1].comp_val == '□':
        blank_cells.append(lst[y+1][x-1])

  if y != wid_lst - 1:
    # Bottom Center
    if not lst[y+1][x].is_vis:
      lst[y+1][x].is_vis = True
      lst[y+1][x].vis_val = lst[y+1][x].comp_val
      if lst[y+1][x].comp_val == '□':
        blank_cells.append(lst[y+1][x])

  if x != len_lst - 1 and y != wid_lst - 1:
    # Bottom Right
    if not lst[y+1][x+1].is_vis:
      lst[y+1][x+1].is_vis = True
      lst[y+1][x+1].vis_val = lst[y+1][x+1].comp_val
      if lst[y+1][x+1].comp_val == '□':
        blank_cells.append(lst[y+1][x+1])

  for element in blank_cells:
    reveal_blank_cells(element.x, element.y)

def reveal_cell(x, y):
  global game_over
  x = int(x)
  y = int(y)

  if not lst[y][x].is_vis:
    if lst[y][x].is_mine:
      game_over = 1
      print('Game over!')
    elif lst[y][x].is_num:
      lst[y][x].vis_val = lst[y][x].comp_val
    else:
      reveal_blank_cells(x, y)
  else:
    return 'You have already revealed this cell!'

len_lst = int(input('What length should the grid have? '))
wid_lst = int(input('What width should the grid have? '))

make_grid(len_lst, wid_lst)
make_mines()
make_num_cells()

while game_over == 0:  
    os.system('clear')
    print(display_grid(False))

    reveal_cell_x = input('\nWhat is the column number of the cell you want to reveal? Input F to flag a cell. ')
  
    if reveal_cell_x.upper() != 'F':
      reveal_cell_y = input('\nWhat is the row number of the cell you want to reveal? Input F to flag a cell. ')
    else:
      reveal_cell_y = 'F'

    if reveal_cell_x.upper() == 'F' or reveal_cell_y.upper() == 'F':
      flag_cell_x = int(input('\nWhat is the column number of the cell you want to flag? '))
      flag_cell_y = int(input('\nWhat is the row number of the cell you want to flag? '))
      
      if lst[flag_cell_y][flag_cell_x].vis_val == '?':
        lst[flag_cell_y][flag_cell_x].vis_val = '⚑'
        lst[flag_cell_y][flag_cell_x].is_flagged = True
      elif lst[flag_cell_y][flag_cell_x].vis_val == '⚑':
        lst[flag_cell_y][flag_cell_x].vis_val = '?'
        lst[flag_cell_y][flag_cell_x].is_flagged = False
      else:
        print('You have already revealed this cell!')
    else:
      os.system('clear')
      reveal_cell(reveal_cell_x, reveal_cell_y)
