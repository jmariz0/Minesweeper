import random
lst = []
class Cell:
  def __init__(self):
    self.is_mine = False
    self.print_value = 'â–¡'

  def __repr__(self):
    return self.print_value

def make_comp_grid():
  for i in range(4):
    sublst = []
    for j in range(4):
      sublst.append(Cell())
    lst.append(sublst)
  return lst

make_comp_grid()

def make_visual_grid():
  grid_str = ''
  for i in range(4):
    for j in range(4):
      grid_str += lst[i][j].print_value + ' '
    grid_str += '\n'
  return grid_str

def make_mines():
  x_pos = 0
  y_pos = 0

  for i in range(8):
    x_pos = random.randint(0, 3)
    y_pos = random.randint(0, 3)
    lst[x_pos][y_pos].is_mine = True
    lst[x_pos][y_pos].print_value = 'B'

make_mines()
print(make_visual_grid())

def find_mines(x, y):
  count = 0
  
  if x != 0 and y != 0:
    # Top Left
    if lst[y-1][x-1].print_value == 'B':
      count += 1
  
  if y != 0:
    # Top Center
    if lst[y-1][x].print_value == 'B':
      count += 1

  if x != 3 and y != 0:
    # Top Right
    if lst[y-1][x+1].print_value == 'B':
      count += 1
  
  if x != 0:
    # Center Left
    if lst[y][x-1].print_value == 'B':
      count += 1

  if x != 3:
    # Center Right
    if lst[y][x+1].print_value == 'B':
      count += 1
  
  if x != 0 and y != 3:
    # Bottom Left
    if lst[y+1][x-1].print_value == 'B':
      count += 1

  if y != 3:
    # Bottom Center
    if lst[y+1][x].print_value == 'B':
      count += 1

  if x != 3 and y != 3:
    # Bottom Right
    if lst[y+1][x+1].print_value == 'B':
      count += 1

  return count

print(find_mines(3, 3))
